@model Product_Management_UI.Models.Product

<link href="~/Content/EditProduct.css" rel="stylesheet" />

@using Product_Management_UI.Models;
@using Product_Management_UI.Models.DataAccessLayer;
@using Microsoft.AspNet.Identity;
@using System.Net.Http;

@{
    ViewBag.Title = "Index";
}

<h2>Add Product</h2>

@{
    ViewBag.Title = "Add Product";
    Product productEdit;
    if (ViewBag.editProduct == null)
    {
        productEdit = new Product();
    }
    else
    {
        productEdit = ViewBag.editProduct;
    }
}

@{
    IEnumerable<SelectListItem> selectListItems = ViewBag.categories;
    string ValueToEdit = ViewBag.editProductCategory;
    string method = "Index";
    if (Request.QueryString["productId"] != null)
    {
        int productId = int.Parse(Request.QueryString["productId"]);

        ProductDataAccess productDataAccess = new ProductDataAccess();
        using (var client = new HttpClient())
        {
            client.BaseAddress = new Uri("http://localhost:22329/api/");

            var responseTask = client.GetAsync("Products/" + productId);
            responseTask.Wait();

            var result = responseTask.Result;
            if (result.IsSuccessStatusCode)
            {
                var readTask = result.Content.ReadAsAsync<Product>();
                readTask.Wait();

                productEdit = readTask.Result;
            }
            else
            {
                productEdit = new Product();
            }
        }
    }

}



@if (productEdit.ProductName != null)
{
    method = "ProductEdit";
}

@if (Request.QueryString["error"] != null)
{
    <div class="user-message user-message--error">
        <h5>@Request.QueryString["error"]</h5>
    </div>
}




@using (Html.BeginForm(method, "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <input type="hidden" name="EditProductId" value="@productEdit.ProductId" />

    <input type="hidden" name="CreatedBy" value=@User.Identity.GetUserId() />

    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control", @Value = productEdit.ProductName } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductCategoryId, "Product Category", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="ProductCategoryId" name="ProductCategoryId" class="form-control">
                    @foreach (SelectListItem option in ViewBag.categories)
                    {
                        <option value="@option.Text" @(option.Text == ValueToEdit ? "selected='selected'" : "")>@option.Text</option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.ProductCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PricePerUnit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PricePerUnit, new { htmlAttributes = new { @class = "form-control", @Value = productEdit.PricePerUnit } })
                @Html.ValidationMessageFor(model => model.PricePerUnit, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @Value = productEdit.Quantity } })
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShortDescription, new { htmlAttributes = new { @class = "form-control", @Value = productEdit.ShortDescription } })
                @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LongDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LongDescription, new { htmlAttributes = new { @class = "form-control", @Value = productEdit.LongDescription } })
                @Html.ValidationMessageFor(model => model.LongDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SmallImagePath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="small_image" class="form-control" accept="image/jpg, image/png, image/jpeg" />
                @Html.ValidationMessageFor(model => model.SmallImagePath, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (productEdit.SmallImagePath != null)
        {
            <div class="form-group">
                <div class="col-md-10">
                    <img src=@productEdit.SmallImagePath class="edit-image"/>
                </div>
            </div>
        }
        

        <div class="form-group">
            @Html.LabelFor(model => model.LargeImagePath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="large_image" class="form-control" />
                @Html.ValidationMessageFor(model => model.LargeImagePath, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (productEdit.LargeImagePath != null)
        {
            <div class="form-group">
                <div class="col-md-10">
                    <img src=@productEdit.LargeImagePath class="edit-image" />
                </div>
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (productEdit.ProductName != null)
                {
                    <input type="submit" value="Update" class="btn btn-default" />
                }
                else
                {
                    <input type="submit" value="Create" class="btn btn-default" />
                }
                <a href="/Home/Index" class="btn btn-primary">Cancel</a>
            </div>
        </div>
    </div>
}

<div>
    <a href="/Home/Index">Back to List</a>
</div>
